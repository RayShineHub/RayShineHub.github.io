(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{478:function(t,v,_){"use strict";_.r(v);var a=_(2),e=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式"),v("OutboundLink")],1),t._v("：又称规则表达式,（ "),v("code",[t._v("Regular Expression")]),t._v("，在代码中常简写为 "),v("code",[t._v("regex")]),t._v(" 、"),v("code",[t._v("regexp")]),t._v(" 或 "),v("code",[t._v("RE")]),t._v(' ），是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"），是计算机科学的一个概念。\n'),t._v("\n正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。")]),t._v(" "),v("h2",{attrs:{id:"知识点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.rayshine.site/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.gif",alt:"JS RegExp知识点"}})]),t._v(" "),v("h2",{attrs:{id:"特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),v("ul",[v("li",[t._v("灵活性、逻辑性和功能性非常强；")]),t._v(" "),v("li",[t._v("可以迅速地用极简单的方式达到字符串的复杂控制；")]),t._v(" "),v("li",[t._v("对于刚接触的人来说，比较晦涩难懂。")])]),t._v(" "),v("h2",{attrs:{id:"语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),v("ol",[v("li",[t._v("构造函数")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" patt"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modifiers"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("ol",{attrs:{start:"2"}},[v("li",[t._v("字符串")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" patt"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("modifiers"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("ul",[v("li",[v("code",[t._v("pattern")]),t._v("(表达式): 描述了表达式的模式。")]),t._v(" "),v("li",[v("code",[t._v("modifiers")]),t._v("(修饰符): 用于指定全局匹配、区分大小写的匹配和多行匹配。")])]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("svg",{staticClass:"svgIcon",attrs:{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"}},[v("g",{attrs:{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"}},[v("circle",{attrs:{cx:"12",cy:"12",r:"9"}}),v("path",{attrs:{d:"M12 8v4"}}),v("path",{attrs:{d:"M12 16h.01"}})])]),v("p",{staticClass:"title"},[t._v("注意")]),v("p",[t._v("当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 "),v("code",[t._v("\\")]),t._v(" ）。比如，以下是等价的：")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\w+"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token regex"}},[v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\w+")]),v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),v("h2",{attrs:{id:"修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),v("p",[t._v("修饰符用于执行区分大小写和全局匹配。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("修饰符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("i")])]),t._v(" "),v("td",[t._v("执行对大小写不敏感的匹配。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("g")])]),t._v(" "),v("td",[t._v("执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("m")])]),t._v(" "),v("td",[t._v("执行多行匹配。")])])])]),t._v(" "),v("h2",{attrs:{id:"方括号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方括号"}},[t._v("#")]),t._v(" 方括号")]),t._v(" "),v("p",[t._v("方括号用于查找某个范围内的字符。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("表达式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("[abc]")])]),t._v(" "),v("td",[t._v("查找方括号之间的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[^abc]")])]),t._v(" "),v("td",[t._v("查找任何不在方括号之间的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[0-9]")])]),t._v(" "),v("td",[t._v("查找任何从 0 至 9 的数字。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[a-z]")])]),t._v(" "),v("td",[t._v("查找任何从小写 a 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[A-Z]")])]),t._v(" "),v("td",[t._v("查找任何从大写 A 到大写 Z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[A-z]")])]),t._v(" "),v("td",[t._v("查找任何从大写 A 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[adgk]")])]),t._v(" "),v("td",[t._v("查找给定集合内的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[^adgk]")])]),t._v(" "),v("td",[t._v("查找给定集合外的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("(red|blue|green)")])]),t._v(" "),v("td",[t._v("查找任何指定的选项。")])])])]),t._v(" "),v("h2",{attrs:{id:"元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),v("p",[t._v("元字符（Metacharacter）是拥有特殊含义的字符。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("元字符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v(".")])]),t._v(" "),v("td",[t._v("查找单个字符，除了换行和行结束符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\w")])]),t._v(" "),v("td",[t._v("查找数字、字母及下划线。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\W")])]),t._v(" "),v("td",[t._v("查找非单词字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\d")])]),t._v(" "),v("td",[t._v("查找数字。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\D")])]),t._v(" "),v("td",[t._v("查找非数字字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\s")])]),t._v(" "),v("td",[t._v("查找空白字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\S")])]),t._v(" "),v("td",[t._v("查找非空白字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\b")])]),t._v(" "),v("td",[t._v("匹配单词边界。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\B")])]),t._v(" "),v("td",[t._v("匹配非单词边界。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\0")])]),t._v(" "),v("td",[t._v("查找 NULL 字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\n")])]),t._v(" "),v("td",[t._v("查找换行符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\f")])]),t._v(" "),v("td",[t._v("查找换页符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\r")])]),t._v(" "),v("td",[t._v("查找回车符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\t")])]),t._v(" "),v("td",[t._v("查找制表符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\v")])]),t._v(" "),v("td",[t._v("查找垂直制表符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\xxx")])]),t._v(" "),v("td",[t._v("查找以八进制数 xxx 规定的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\xdd")])]),t._v(" "),v("td",[t._v("查找以十六进制数 dd 规定的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\uxxxx")])]),t._v(" "),v("td",[t._v("查找以十六进制数 xxxx 规定的 Unicode 字符。")])])])]),t._v(" "),v("h2",{attrs:{id:"量词"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("量词")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("n+")])]),t._v(" "),v("td",[t._v('匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 "candy" 中的 "a"，"caaaaaaandy" 中所有的 "a"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n*")])]),t._v(" "),v("td",[t._v('匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 "A ghost booooed" 中的 "boooo"，"A bird warbled" 中的 "b"，但是不匹配 "A goat grunted"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n?")])]),t._v(" "),v("td",[t._v('匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 "angel" 中的 "el"，"angle" 中的 "le"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n{X}")])]),t._v(" "),v("td",[t._v('匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 "candy," 中的 "a"，但是匹配 "caandy," 中的两个 "a"，且匹配 "caaandy." 中的前两个 "a"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n{X,}")])]),t._v(" "),v("td",[t._v('X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 "candy" 中的 "a"，但是匹配 "caandy" 和 "caaaaaaandy." 中所有的 "a"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n{X,Y}")])]),t._v(" "),v("td",[t._v("X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，"),v("code",[t._v("/a{1,3}/")]),t._v(' 不匹配 "cndy"，匹配 "candy," 中的 "a"，"caandy," 中的两个 "a"，匹配 "caaaaaaandy" 中的前面三个 "a"。注意，当匹配 "caaaaaaandy" 时，即使原始字符串拥有更多的 "a"，匹配项也是 "aaa"。')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("n$")])]),t._v(" "),v("td",[t._v("匹配任何结尾为 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("^n")])]),t._v(" "),v("td",[t._v("匹配任何开头为 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("?=n")])]),t._v(" "),v("td",[t._v("匹配任何其后紧接指定字符串 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("?!n")])]),t._v(" "),v("td",[t._v("匹配任何其后没有紧接指定字符串 n 的字符串。")])])])]),t._v(" "),v("h2",{attrs:{id:"regexp-对象方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象方法"}},[t._v("#")]),t._v(" RegExp 对象方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("compile()")])]),t._v(" "),v("td",[t._v("在 1.5 版本中已废弃。 编译正则表达式。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("exec()")])]),t._v(" "),v("td",[t._v("检索字符串中指定的值。返回找到的值，并确定其位置。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("test()")])]),t._v(" "),v("td",[t._v("检索字符串中指定的值。返回 "),v("code",[t._v("true")]),t._v(" 或 "),v("code",[t._v("false")]),t._v("。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("toString()")])]),t._v(" "),v("td",[t._v("返回正则表达式的字符串。")])])])]),t._v(" "),v("h2",{attrs:{id:"支持正则表达式的-string-对象的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#支持正则表达式的-string-对象的方法"}},[t._v("#")]),t._v(" 支持正则表达式的 String 对象的方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("FF")]),t._v(" "),v("th",[t._v("IE")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("search()")])]),t._v(" "),v("td",[t._v("检索与正则表达式相匹配的值。")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("match()")])]),t._v(" "),v("td",[t._v("找到一个或多个正则表达式的匹配。")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("replace()")])]),t._v(" "),v("td",[t._v("替换与正则表达式匹配的子串。")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("4")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("split()")])]),t._v(" "),v("td",[t._v("把字符串分割为字符串数组。")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("4")])])])]),t._v(" "),v("h2",{attrs:{id:"regexp-对象属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象属性"}},[t._v("#")]),t._v(" RegExp 对象属性")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("属性")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("constructor")])]),t._v(" "),v("td",[t._v("返回一个函数，该函数是一个创建 "),v("code",[t._v("RegExp")]),t._v(" 对象的原型")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("global")])]),t._v(" "),v("td",[t._v("判断是否设置了 "),v("code",[t._v('"g"')]),t._v(" 修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ignoreCase")])]),t._v(" "),v("td",[t._v("判断是否设置了 "),v("code",[t._v('"i"')]),t._v(" 修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("lastIndex")])]),t._v(" "),v("td",[t._v("用于规定下次匹配的起始位置")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("multiline")])]),t._v(" "),v("td",[t._v("判断是否设置了 "),v("code",[t._v('"m"')]),t._v(" 修饰符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("source")])]),t._v(" "),v("td",[t._v("返回正则表达式的匹配模式")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);